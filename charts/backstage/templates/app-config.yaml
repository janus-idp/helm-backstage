apiVersion: v1
kind: Secret
metadata:
  name: {{ include "backstage.config.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "backstage.labels" . | nindent 4 }}
stringData:
  app-config.yaml: |
    app:
      # Should be the same as backend.baseUrl when using the `app-backend` plugin.
      #baseUrl: http://{{ .Release.Name }}:7007
      baseUrl: {{ required "Provide App baseUrl in values" .Values.backstage.baseUrl }}

    organization:
      name: "{{ .Values.backstage.companyname }}"

    backend:
      # Note that the baseUrl should be the URL that the browser and other clients
      # should use when communicating with the backend, i.e. it needs to be
      # reachable not just from within the backend host, but from all of your
      # callers. When its value is "http://localhost:7007", it's strictly private
      # and can't be reached by others.
      #baseUrl: http://{{ .Release.Name }}:7007
      baseUrl: {{ .Values.backstage.baseUrl }}
      listen:
        port: 7007
        # The following host directive binds to all IPv4 interfaces when its value
        # is "0.0.0.0". This is the most permissive setting. The right value depends
        # on your specific deployment. If you remove the host line entirely, the
        # backend will bind on the interface that corresponds to the backend.baseUrl
        # hostname.
        host: 0.0.0.0
      csp:
        connect-src: ["'self'", 'http:', 'https:']
        # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
        # Default Helmet Content-Security-Policy values can be removed by setting the key to false
      cors:
        origin: {{ .Values.backstage.baseUrl }}
        methods: [GET, POST, PUT, DELETE]
        credentials: true

      # config options: https://node-postgres.com/api/client
      database:
        client: pg
        connection:
          host: "${POSTGRES_HOST}"
          port: "${POSTGRES_PORT}"
          user: "${POSTGRES_USER}"
          password: "${POSTGRES_ADMIN_PASSWORD}"
      cache:
        store: memory

    integrations: {}
      #github:
        #- host: github.com
        #  # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
          # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
       #   token: ${GITHUB_TOKEN}

    proxy:
      '/test':
        target: 'https://example.com'
        changeOrigin: true

    # Reference documentation http://backstage.io/docs/features/techdocs/configuration
    # Note: After experimenting with basic setup, use CI/CD to generate docs
    # and an external cloud storage when deploying TechDocs for production use-case.
    # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'docker' # Alternatives - 'local'
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

    auth:
      # see https://backstage.io/docs/auth/ to learn about auth providers
      providers: {}

    scaffolder:
      # see https://backstage.io/docs/features/software-templates/configuration for software template options

    catalog:
      # Overrides the default list locations from app-config.yaml as these contain example data.
      # See https://backstage.io/docs/features/software-catalog/software-catalog-overview#adding-components-to-the-catalog for more details
      # on how to get entities into the catalog.
      {{- with .Values.backstage.catalog }}
        {{- toYaml . | nindent 6 }}
      {{- end }}

{{- if .Values.additionalConfig }}
  additional-config.yaml: |
    {{- toYaml .Values.additionalConfig | nindent 4 }}
{{- end }}
