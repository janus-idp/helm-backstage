# -- Upstream Backstage [chart configuration](https://github.com/backstage/charts/blob/main/charts/backstage/values.yaml)
# @default -- Use Openshift compatible settings
upstream:
  nameOverride: backstage
  backstage:
    image:
      registry: quay.io
      repository: janus-idp/backstage-showcase
      tag: latest
    command: []
    # FIXME (tumido): USE POSTGRES_PASSWORD and POSTGRES_USER instead of POSTGRES_ADMIN_PASSWORD
    # This is a hack. In {fedora,rhel}/postgresql images, regular user is forbidden
    # from creating DBs in runtime. A single DB can be created ahead of time via
    # POSTGRESQL_DATABASE env variable (in this case via
    # upstream.postgresql.primary.extraEnvVars value), but this doesn't allow us to
    # create multiple DBs. Since Backstage requires by default 5 different DBs, we
    # can't accommodate that properly.
    appConfig:
      app:
        # Please update to match host.
        baseUrl: 'https://{{- print .Release.Name "-" .Release.Namespace -}}.apps.example.com'
      backend:
        baseUrl: 'https://{{- print .Release.Name "-" .Release.Namespace -}}.apps.example.com'
        cors:
          origin: 'https://{{- print .Release.Name "-" .Release.Namespace -}}.apps.example.com'
        database:
          connection:
            password: ${POSTGRESQL_ADMIN_PASSWORD}
            user: postgres
    extraEnvVars:
    - name: POSTGRESQL_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          key: postgres-password
          name: "{{ .Release.Name }}-postgresql"

  postgresql:
    enabled: true
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    image:
      registry: quay.io
      repository: fedora/postgresql-15
      tag: latest
    auth:
      secretKeys:
        adminPasswordKey: postgres-password
        userPasswordKey: password
    primary:
      securityContext:
        enabled: false
      podSecurityContext:
        enabled: false
      containerSecurityContext:
        enabled: false
      persistence:
        enabled: true
        size: 1Gi
        mountPath: /var/lib/pgsql/data
      extraEnvVars:
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: "{{ .Release.Name }}-postgresql"


# -- OpenShift Route parameters
route:

  # -- Route specific annotations
  annotations: {}

  # -- Enable the creation of the route resource
  enabled: true

  # -- Set the host attribute to a custom value. If not set, OpenShift will generate it, please make sure to match your baseUrl
  host: ""

  # -- Path that the router watches for, to route traffic for to the service.
  path: "/"

  # -- Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
  wildcardPolicy: None

  # -- Route TLS parameters
  # <br /> Ref: https://docs.openshift.com/container-platform/4.9/networking/routes/secured-routes.html
  tls:

    # -- Enable TLS configuration for the host defined at `route.host` parameter
    enabled: true

    # -- Specify TLS termination.
    termination: "edge"

    # -- Certificate contents
    certificate: ""

    # -- Key file contents
    key: ""

    # -- Cert authority certificate contents. Optional
    caCertificate: ""

    # -- Contents of the ca certificate of the final destination.
    # <br /> When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
    destinationCACertificate: ""

    # --  Indicates the desired behavior for insecure connections to a route.
    # <br /> While each router may make its own decisions on which ports to expose, this is normally port 80. The only valid values are None, Redirect, or empty for disabled.
    insecureEdgeTerminationPolicy: "Redirect"


# -- Build Backstage image in-cluster
build:

  # -- Enables creation of BuildConfig and ImageStream resources
  enabled: false

  # -- ImageStream specific values
  imageStream:

    # -- Additional annotations to apply to the ImageStream
    annotations: {}

  # --  BuildConfig specific values
  buildConfig:

    # -- Additional annotations to apply to the BuildConfig
    annotations: {}

    # -- Source repository URI
    # <br /> Ref: https://docs.openshift.com/container-platform/4.12/cicd/builds/creating-build-inputs.html#builds-source-code_creating-build-inputs
    uri: "https://github.com/janus-idp/backstage-showcase.git"

    # -- Source repository reference
    # <br /> Ref: https://docs.openshift.com/container-platform/4.12/cicd/builds/creating-build-inputs.html#builds-source-code_creating-build-inputs
    ref: "main"

    # -- Source repository context folder
    # <br /> Ref: https://docs.openshift.com/container-platform/4.12/cicd/builds/creating-build-inputs.html#builds-source-code_creating-build-inputs
    contextDir: ""

    # -- Secrets to be used when cloning the source repository
    # <br /> Ref: https://docs.openshift.com/container-platform/4.12/cicd/builds/creating-build-inputs.html#builds-adding-source-clone-secrets_creating-build-inputs
    sourceSecretName: ""

    # -- Amount of failed builds to keep in history
    failedBuildsHistoryLimit: 5

    # -- Amount of successful builds to keep in history
    successfulBuildsHistoryLimit: 5

    # -- Build timeout in seconds. Defaults to 30 minutes
    completionDeadlineSeconds: 1800

    # -- Resource requests/limits
    # <br /> Ref: https://kubernetes.io/docs/user-guide/compute-resources/
    resources:
      limits:
        cpu: "500m"
        memory: "2Gi"

    # -- Build strategy settings
    strategy:

      # -- Build strategy selector. This chart currently supports either "Source" or "Docker" values.
      type: "Source"

      # -- Source-to-image build strategy
      source:

        # -- Override S2I scripts by custom location. Defaults to Janus-IDP scripts that work for Backstage out of the box
        # <br /> Ref: https://docs.openshift.com/container-platform/4.12/cicd/builds/build-strategies.html#builds-strategy-s2i-override-builder-image-scripts_build-strategies-docker
        scripts: "https://raw.githubusercontent.com/janus-idp/redhat-backstage-build/add-s2i/.s2i/bin/"

      # -- Docker build strategy: Use Buildah to build a container image from a Dockerfile
      docker:
        # -- Pull secrets to be used for images referenced in Dockerfile
        # <br /> Ref: https://docs.openshift.com/container-platform/4.12/cicd/builds/creating-build-inputs.html#builds-docker-credentials-private-registries_creating-build-inputs
        pullSecrets: []

        # -- Path to dockerfile relative to contextDir
        # <br /> Ref: https://docs.openshift.com/container-platform/4.12/cicd/builds/build-strategies.html#builds-strategy-dockerfile-path_build-strategies
        dockerfilePath: "./Dockerfile"

    # -- Triggers that initiate a new build.
    # <br /> Ref: https://docs.openshift.com/container-platform/4.12/cicd/builds/triggering-builds-build-hooks.html
    triggers:
      - type: ConfigChange
      - type: ImageChange
