replicaCount: 1

image:
  #repository: ghcr.io/raffaelespazzoli/backstage-autobuild
  pullPolicy: Always
  #tag: "main"
  repository: quay.io/assemble/backstage
  tag: "55a870a1b99a04f7b22339804a5a2b7ed1c4ff58"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 8080
  targetPort: 7007

## For custom route provide value
route:
  enabled: true

## When enabled the host will be derived from the backstage baseUrl so no property needed.
ingress:
  enabled: false

  ## @param ingress.className Name of the IngressClass cluster resource which defines which controller will implement the resource (e.g nginx)
  className: ""

  ## @param ingress.annotations Additional annotations for the Ingress resource
  annotations: 
    route.openshift.io/termination: "edge"



# name of instances
name: backstage

postgres:
  external: false
  ## Use presistent storage
  storage: 
    enabled: true
    size: 2Gi
    #storageClass: "g2"
  database_user: postgres
  database_name: postgres
  ## If using external db set the host
  #database_host: "example.com"
  ## Password will be autogenerated if left empty
  ## If using extrnal instance supply the password
  #database_password: "somepassword"
  database_port: 5432
  ## To you self created secret define the following
  #existingSecret: my-secret
  #secretKeys:
  #  adminPasswordKey: adminPassword
  image: registry.redhat.io/rhel9/postgresql-13:1-73
  resources:
    limits:
      cpu: 400m
      memory: 596Mi
    requests:
      cpu: 100m
      memory: 128Mi
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template

#securityContext: restricted

## There is a secret created via the template/
backstage:
  companyname: "Red Hat Backstage Helm Chart"
  baseUrl: ""

  ## Override Catalog with here
  catalog:
    #import:
    #  entityFilename: /examples/catalog-info.yaml
    #  pullRequestBranchName: backstage-integration
    rules:
      - allow: [Component, System, API, Resource, Location]
    locations:
      # Local example data, file locations are relative to the backend process, typically `packages/backend`
      #- type: file
      #  target: /examples/entities.yaml

      # Local example template
      #- type: file
      #  target: /examples/template/template.yaml
      #  rules:
      #    - allow: [Template]

      # Local example organizational data
      #- type: file
      #  target: /examples/org.yaml
      #  rules:
      #    - allow: [User, Group]

      - type: url
        target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-components.yaml

      # Backstage example systems
      #- type: url
      #  target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-systems.yaml

      # Backstage example APIs
      #- type: url
      #  target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-apis.yaml

      # Backstage example resources
      #- type: url
      #  target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-resources.yaml

      # Backstage example organization groups
      #- type: url
      #  target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme/org.yaml

      # Backstage example templates
      #- type: url
      #  target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/react-ssr-template/template.yaml
      #  rules:
      #    - allow: [Template]


